// <auto-generated />

using Duck.Serialization;
using Duck.Serialization.Exception;

namespace Generated.Serializer;

public class Instanciator : IInstanciator
{
    public bool CanInstanciate(string typeName)
    {
        switch(typeName) {
            case "Duck.Scene.Components.BoundingBoxComponent":
            case "Duck.Scene.Components.CameraComponent":
            case "Duck.Scene.Components.ParentComponent":
            case "Duck.Scene.Components.TransformComponent":
            case "Duck.Scene.Scene":
            case "Duck.Scene.SceneSubsystem":

                return true;
        }

        return false;
    }

    public object Instanciate(string typeName, IDeserializer deserializer, IDeserializationContext context)
    {
        return typeName switch {
            "Duck.Scene.Components.BoundingBoxComponent" => new Duck.Scene.Components.BoundingBoxComponent(deserializer, context),
            "Duck.Scene.Components.CameraComponent" => new Duck.Scene.Components.CameraComponent(deserializer, context),
            "Duck.Scene.Components.ParentComponent" => new Duck.Scene.Components.ParentComponent(deserializer, context),
            "Duck.Scene.Components.TransformComponent" => new Duck.Scene.Components.TransformComponent(deserializer, context),
            "Duck.Scene.Scene" => new Duck.Scene.Scene(deserializer, context),
            "Duck.Scene.SceneSubsystem" => new Duck.Scene.SceneSubsystem(deserializer, context),

            _ => default
        };
    }

    public object Instanciate<T>(string typeName, IDeserializer deserializer, IDeserializationContext context)
        where T : struct
    {
        return typeName switch {

            _ => default
        };
    }
}
