// <auto-generated />

using Duck.Serialization;
using Duck.Serialization.Exception;

namespace Generated.Serializer;

public class Instanciator : IInstanciator
{
    public bool CanInstanciate(string typeName)
    {
        switch(typeName) {
            case "Duck.Ecs.ComponentPool<T>":
            case "Duck.Ecs.ComponentPoolCollection":
            case "Duck.Ecs.Entity":
            case "Duck.Ecs.EntityPool":
            case "Duck.Ecs.World":

                return true;
        }

        return false;
    }

    public object Instanciate(string typeName, IDeserializer deserializer, IDeserializationContext context)
    {
        return typeName switch {
            "Duck.Ecs.ComponentPoolCollection" => new Duck.Ecs.ComponentPoolCollection(deserializer, context),
            "Duck.Ecs.Entity" => new Duck.Ecs.Entity(deserializer, context),
            "Duck.Ecs.EntityPool" => new Duck.Ecs.EntityPool(deserializer, context),
            "Duck.Ecs.World" => new Duck.Ecs.World(deserializer, context),

            _ => default
        };
    }

    public object Instanciate<T>(string typeName, IDeserializer deserializer, IDeserializationContext context)
        where T : struct
    {
        return typeName switch {
            "Duck.Ecs.ComponentPool<T>" => new Duck.Ecs.ComponentPool<T>(deserializer, context),

            _ => default
        };
    }
}
